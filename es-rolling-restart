#!/usr/bin/python

import argparse
import os.path
import requests
import json
import time, signal, sys

user = "elastic"
pwd = "changeme"

parser = argparse.ArgumentParser()
parser.add_argument("-m", "--masternode",
                    help="name Elastisearch node we consider to be master")

args = parser.parse_args()

if not args.masternode:
    parser.print_help()
    quit(1)

def get_health(master):
    try:
        r = requests.get(master + "/_cluster/health", auth=(user, pwd), timeout=5)
        r.raise_for_status()
        return json.loads(r.content)
    except Exception as e:
        print e
        sys.exit(1)

def signal_handler(signum, stack):
    sys.exit(0)

# retrieve list of nodes, return list of datanodes
def get_nodes(master):
    try:
        r = requests.get(master + "/_nodes", auth=(user, pwd), timeout=5)
        r.raise_for_status()
        nodes = json.loads(r.content)
        datanodes = []
        for key, value in nodes['nodes'].items():
            if not value['roles']:
                continue
            else:
                datanodes.append(value['name'])
        datanodes.sort()
        return datanodes
    except Exception as e:
        print e
        sys.exit(1)

# exit on SIGINT/SIGHUP
signal.signal( signal.SIGHUP, signal_handler)
signal.signal( signal.SIGINT, signal_handler)

datanodes = get_nodes(args.masternode)
print "Datanodes in cluster: ", datanodes

#time.sleep(60)

# wait until cluster health status is green
while True: 
    try:
        cls_hlth = get_health(args.masternode)
        if cls_hlth['status'] == 'green':
            break
        print "Status: ", cls_hlth['status']
        print "Number of nodes: ", cls_hlth['number_of_nodes']
        print "unassigned_shards", cls_hlth['unassigned_shards']
        print "initializing_shards", cls_hlth['initializing_shards']
        print "sleeping 5 seconds..."
        time.sleep(5)
    except Exception as e:
        print e


